#Install Apache webserver
---
- name: setup apache webserver
  hosts: ec2_devops
  tasks:
  - name: Install apache packages 
    yum:
      name: httpd
      state: present
  - name: Ensure httpd is running
    service:
      name: httpd 
      state: started
  - name: Open port 80 for http access
    firewalld:
      service: http
      permanent: true
      state: enabled
  - name: Restart the firewalld service to load in the firewall changes
    service: 
      name: firewalld 
      state: restarted

#Install Tomcat Server
---
- name: setup apache webserver
  hosts: ec2_devops
  tasks:
   - name: Install Java
     yum:
       name: "{{ item.package }}"
       state: present
     with_items: "{{ tomcat_java_packages_EL }}"
     when: tomcat_install_java|bool

   - name: Check if tomcat is already installed
     stat:
       path: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}"
     register: is_installed

   - name: Create group {{ tomcat_group }}
     group:
       name: "{{ tomcat_group }}"
       gid: "{{ tomcat_group_gid | default(omit) }}"
       state: present

   - name: Create user {{ tomcat_user }}
     user:
       name: "{{ tomcat_user }}"
       group: "{{ tomcat_group }}"
       uid: "{{ tomcat_user_uid | default(omit) }}"
       state: present

   - name: Create temp directory
     file:
       path: '{{ tomcat_temp_download_path }}'
       state: directory
     changed_when: False
     when: not is_installed.stat.exists

   - name: Download apache-tomcat-{{ tomcat_version }}.tar.gz
     get_url:
       url: "{{ tomcat_downloadURL }}/tomcat/tomcat-{{ tomcat_version.split('.')[0] }}/v{{ tomcat_version }}/bin/apache-tomcat-{{ tomcat_version }}.tar.gz"
       dest: '{{ tomcat_temp_download_path }}'
       timeout: 120
     when: not is_installed.stat.exists

   - name: Unarchive apache-tomcat-{{ tomcat_version }}.tar.gz at {{ tomcat_install_path }}
     unarchive:
       src: "{{ tomcat_temp_download_path }}/apache-tomcat-{{ tomcat_version }}.tar.gz"
       dest: "{{ tomcat_install_path }}"
       remote_src: True
       owner: "{% if tomcat_permissions_production %}root{% else %}{{ tomcat_user }}{% endif %}"
       group: "{{ tomcat_group }}"
       creates: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}"
     register: tomcat_installed
     when: not is_installed.stat.exists

   - name: Clean up temporary files
     file:
       path: '{{ tomcat_temp_download_path }}'
       state: absent
     changed_when: False
     when: not is_installed.stat.exists

     #Configure tomcat
   - name: Setup server.xml
     template:
       src: "{{ tomcat_template_server }}"
       dest: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}/conf/server.xml"
     notify: restart tomcat

   - name: Set fact of user roles to be enabled
     set_fact:
       tomcat_user_roles: "{{ (tomcat_user_roles + item.roles.split(',')|list)|unique }}"
     with_items:
       - "{{ tomcat_users }}"

   - name: Setup tomcat-users.xml
     template:
       src: "{{ tomcat_template_users }}"
       dest: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}/conf/tomcat-users.xml"
     notify: restart tomcat

   - name: Create symlink {{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }} to {{ tomcat_install_path }}/{{ tomcat_service_name }}
     file:
       src: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}"
       dest: "{{ tomcat_install_path }}/{{ tomcat_service_name }}"
       state: link

   - name: Configure access to Manager app (from localhost only or from anywhere)
     template:
       src: "{{ tomcat_template_manager_context }}"
       dest: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}/webapps/manager/META-INF/context.xml"
     notify: restart tomcat

   - name: Configure access to Host Manager (from localhost only or from anywhere)
     template:
       src: "{{ tomcat_template_host_manager_context }}"
       dest: "{{ tomcat_install_path }}/apache-tomcat-{{ tomcat_version }}/webapps/host-manager/META-INF/context.xml"
     notify: restart tomcat

   - name: Set production permissions
     include: set-production-permissions.yml
     when: >
       (tomcat_installed is changed or tomcat_permissions_ensure_on_every_run) and
       tomcat_permissions_production
   - name: Set non production permissions
     include: set-non-production-permissions.yml
     when: >
       (tomcat_installed is changed or tomcat_permissions_ensure_on_every_run) and
    not tomcat_permissions_production
   - name: Configure service file {{ tomcat_service_name }}.service
     template:
       src: "{{ tomcat_template_systemd_service }}"
       dest: /usr/lib/systemd/system/{{ tomcat_service_name }}.service
     notify: restart tomcat

   - name: Enable tomcat service on startup
     systemd:
       name: "{{ tomcat_service_name }}"
       enabled: "{% if tomcat_service_enabled_on_startup %}yes{% else %}no{% endif %}"
       daemon_reload: yes

#Install MySQL & Teknet
- hosts: ec2_devops
  sudo: yes
  tasks:
    - name: Install MySQL
      action: yum name=$item
      with_items:
        - mysql
        - mysql-server
    - name: Start the MySQL service
      action: service name=mysqld state=started
    - name: Configure the root credentials
      action: command mysqladmin -u root -p $mysql_root_password
    - name: Install the provided package
        yum:
          pkg: "{{ item }}"
          state: latest
        with_items:
         - telnet
         - telnet-server
